// generated by @greymass/abi2core

import {
  BlockTimestamp,
  Bytes,
  Checksum256,
  Name,
  PublicKey,
  Signature,
  Struct,
  TimePoint,
  TypeAlias,
  UInt16,
  UInt32,
  UInt64,
  Variant,
  VarUInt
} from "@greymass/eosio"

@Struct.type("key_weight")
export class KeyWeight extends Struct {
  @Struct.field(PublicKey) key!:PublicKey
  @Struct.field(UInt16) weight!:UInt16
}

@Struct.type("block_signing_authority_v0")
export class BlockSigningAuthorityV0 extends Struct {
  @Struct.field(UInt32) threshold!:UInt32
  @Struct.field(KeyWeight, { array: true }) keys!:KeyWeight[]
}

@Variant.type("variant_block_signing_authority_v0", [BlockSigningAuthorityV0])
class VariantBlockSigningAuthorityV0 extends Variant {}

@TypeAlias("block_signing_authority")
class BlockSigningAuthority extends VariantBlockSigningAuthorityV0 {}

@Struct.type("permission_level")
export class PermissionLevel extends Struct {
  @Struct.field(Name) actor!:Name
  @Struct.field(Name) permission!:Name
}

@Struct.type("action")
export class Action extends Struct {
  @Struct.field(Name) account!:Name
  @Struct.field(Name) name!:Name
  @Struct.field(PermissionLevel, { array: true }) authorization!:PermissionLevel[]
  @Struct.field(Bytes) data!:Bytes
}

@Struct.type("authseq")
export class Authseq extends Struct {
  @Struct.field(Name) account!:Name
  @Struct.field(UInt64) sequence!:UInt64
}

@Struct.type("actreceipt")
export class Actreceipt extends Struct {
  @Struct.field(Name) receiver!:Name
  @Struct.field(Checksum256) act_digest!:Checksum256
  @Struct.field(UInt64) global_sequence!:UInt64
  @Struct.field(UInt64) recv_sequence!:UInt64
  @Struct.field(Authseq, { array: true }) auth_sequence!:Authseq[]
  @Struct.field(VarUInt) code_sequence!:VarUInt
  @Struct.field(VarUInt) abi_sequence!:VarUInt
}

@Struct.type("actionproof")
export class Actionproof extends Struct {
  @Struct.field(Action) action!:Action
  @Struct.field(Actreceipt) receipt!:Actreceipt
  @Struct.field(Bytes) returnvalue!:Bytes
  @Struct.field(Checksum256, { array: true }) amproofpath!:Checksum256[]
}

@Struct.type("producer_key")
export class ProducerKey extends Struct {
  @Struct.field(Name) producer_name!:Name
  @Struct.field(PublicKey) block_signing_key!:PublicKey
}

@Struct.type("producer_schedule")
export class ProducerSchedule extends Struct {
  @Struct.field(UInt32) version!:UInt32
  @Struct.field(ProducerKey, { array: true }) producers!:ProducerKey[]
}

@Struct.type("pair_uint16_bytes")
export class PairUint16Bytes extends Struct {
  @Struct.field(UInt16) first!:UInt16
  @Struct.field(Bytes) second!:Bytes
}

@Struct.type("blockheader")
export class Blockheader extends Struct {
  @Struct.field(BlockTimestamp) timestamp!:BlockTimestamp
  @Struct.field(Name) producer!:Name
  @Struct.field(UInt16) confirmed!:UInt16
  @Struct.field(Checksum256) previous!:Checksum256
  @Struct.field(Checksum256) transaction_mroot!:Checksum256
  @Struct.field(Checksum256) action_mroot!:Checksum256
  @Struct.field(UInt32) schedule_version!:UInt32
  @Struct.field(ProducerSchedule, { optional: true }) new_producers?:ProducerSchedule
  @Struct.field(PairUint16Bytes, { array: true }) header_extensions!:PairUint16Bytes[]
}

@Struct.type("sblockheader")
export class Sblockheader extends Struct {
  @Struct.field(Blockheader) header!:Blockheader
  @Struct.field(Signature, { array: true }) producer_signatures!:Signature[]
  @Struct.field(Checksum256) previous_bmroot!:Checksum256
  @Struct.field(UInt16, { array: true }) bmproofpath!:UInt16[]
}

@Struct.type("anchorblock")
export class Anchorblock extends Struct {
  @Struct.field(Sblockheader) block!:Sblockheader
  @Struct.field(UInt16, { array: true }) active_nodes!:UInt16[]
  @Struct.field(UInt64) node_count!:UInt64
}

@Struct.type("chain")
export class Chain extends Struct {
  @Struct.field(Name) name!:Name
  @Struct.field(Checksum256) chain_id!:Checksum256
  @Struct.field(UInt32) return_value_activated!:UInt32
  @Struct.field("bool") enabled!:boolean
}

@Struct.type("producer_authority")
export class ProducerAuthority extends Struct {
  @Struct.field(Name) producer_name!:Name
  @Struct.field(BlockSigningAuthority) authority!:BlockSigningAuthority
}

@Struct.type("schedulev2")
export class Schedulev2 extends Struct {
  @Struct.field(UInt32) version!:UInt32
  @Struct.field(ProducerAuthority, { array: true }) producers!:ProducerAuthority[]
}

@Struct.type("chainschedule")
export class Chainschedule extends Struct {
  @Struct.field(UInt64) version!:UInt64
  @Struct.field(ProducerSchedule) producer_schedule_v1!:ProducerSchedule
  @Struct.field(Schedulev2) producer_schedule_v2!:Schedulev2
  @Struct.field(Checksum256) hash!:Checksum256
  @Struct.field(UInt32) first_block!:UInt32
  @Struct.field(UInt32) last_block!:UInt32
  @Struct.field(TimePoint) expiry!:TimePoint
}

@Struct.type("checkproofa")
export class Checkproofa extends Struct {
  @Struct.field(Name) contract!:Name
}

@Struct.type("checkproofb")
export class Checkproofb extends Struct {
  @Struct.field(Name) contract!:Name
  @Struct.field(Actionproof) actionproof!:Actionproof
}

@Struct.type("checkproofc")
export class Checkproofc extends Struct {
  @Struct.field(Name) contract!:Name
  @Struct.field(Actionproof) actionproof!:Actionproof
}

@Struct.type("heavyproof")
export class Heavyproof extends Struct {
  @Struct.field(Checksum256) chain_id!:Checksum256
  @Struct.field(Checksum256, { array: true }) hashes!:Checksum256[]
  @Struct.field(Anchorblock) blocktoprove!:Anchorblock
  @Struct.field(Sblockheader, { array: true }) bftproof!:Sblockheader[]
}

@Struct.type("checkproofd")
export class Checkproofd extends Struct {
  @Struct.field(Heavyproof) blockproof!:Heavyproof
}

@Struct.type("checkproofe")
export class Checkproofe extends Struct {
  @Struct.field(Heavyproof) blockproof!:Heavyproof
  @Struct.field(Actionproof) actionproof!:Actionproof
}

@Struct.type("lightproof")
export class Lightproof extends Struct {
  @Struct.field(Checksum256) chain_id!:Checksum256
  @Struct.field(Blockheader) header!:Blockheader
  @Struct.field(Checksum256) root!:Checksum256
  @Struct.field(Checksum256, { array: true }) bmproofpath!:Checksum256[]
}

@Struct.type("checkprooff")
export class Checkprooff extends Struct {
  @Struct.field(Lightproof) blockproof!:Lightproof
  @Struct.field(Actionproof) actionproof!:Actionproof
}

@Struct.type("disable")
export class Disable extends Struct {
  @Struct.field(Name) chain_name!:Name
}

@Struct.type("enable")
export class Enable extends Struct {
  @Struct.field(Name) chain_name!:Name
}

@Struct.type("hpstruct")
export class Hpstruct extends Struct {
  @Struct.field(UInt64) id!:UInt64
  @Struct.field(Heavyproof) hp!:Heavyproof
}

@Struct.type("inita")
export class Inita extends Struct {
  @Struct.field(Name) chain_name!:Name
  @Struct.field(Checksum256) chain_id!:Checksum256
  @Struct.field(UInt32) return_value_activated!:UInt32
  @Struct.field(ProducerSchedule) initial_schedule!:ProducerSchedule
}

@Struct.type("initb")
export class Initb extends Struct {
  @Struct.field(Name) chain_name!:Name
  @Struct.field(Checksum256) chain_id!:Checksum256
  @Struct.field(UInt32) return_value_activated!:UInt32
  @Struct.field(Schedulev2) initial_schedule!:Schedulev2
}

@Struct.type("lastproof")
export class Lastproof extends Struct {
  @Struct.field(UInt64) id!:UInt64
  @Struct.field(UInt32) block_height!:UInt32
  @Struct.field(Checksum256) block_merkle_root!:Checksum256
  @Struct.field(TimePoint) expiry!:TimePoint
}

@Struct.type("lpstruct")
export class Lpstruct extends Struct {
  @Struct.field(UInt64) id!:UInt64
  @Struct.field(Lightproof) lp!:Lightproof
}
